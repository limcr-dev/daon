<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
     "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
     
<mapper namespace="com.spring.daon.attendMgt.AttendMgtMapper">
	
	<!-- 출근 버튼 클릭 시 -->
	<insert id="checkIn" parameterType="java.util.Map">		
		INSERT INTO attendance (emp_no, check_in_time, normal, late)
		VALUES (
		    #{emp_no}, 
		    curtime(),
		    CASE 
		        WHEN #{start_time} >= CURTIME() THEN 1
		        ELSE 0  
		    END,
		    CASE 
		        WHEN #{start_time} > CURTIME() THEN 0
		        ELSE 1  
		    END
		)
	</insert>
	
	<!-- 퇴근 버튼 클릭 시 -->
	<update id="checkOut" parameterType="java.util.Map">
	update attendance
		set check_out_time = curtime(),
			work_hours = TIMESTAMPDIFF(MINUTE, check_in_time, CURTIME()) / 60,
	        normal = CASE 
				        WHEN #{end_time} >= CURTIME() OR late = 1 THEN 0
				        ELSE 1  
				    END,
			early_leave = CASE 
				        	WHEN #{end_time} > CURTIME() THEN 1
				        	ELSE 0
				    	  END
		where  emp_no = #{emp_no}
		  and  date = curdate()
	</update>
	
	<!-- 오늘 출 퇴근 기록 불러오기 -->
	<select id="attendByDate" parameterType="int" resultType="com.spring.daon.attendMgt.Attendance">
		select * from attendance
	 	where emp_no = #{emp_no}
	 	 and  date = curdate()
	</select>
	
	<!-- 근무 유형 조회 -->
	<select id="workType" parameterType="int" resultType="com.spring.daon.attendMgt.Work_schedules">
		select w.work_type_no,
			   w.type_name,
			   w.start_time,
			   w.end_time,
			   w.total_time
			   
		from work_schedules w
		JOIN employees e ON e.work_type_no = w.work_type_no
		where e.emp_no = #{emp_no}
	</select>

	<!-- 선택한 달 출퇴근 통계 불러오기 -->
	<select id="attendCnt" parameterType="java.util.Map" resultType="com.spring.daon.attendMgt.Attendance">
		SELECT 
		    SUM(normal) AS normal, 
		    SUM(late) AS late, 
		    SUM(early_leave) AS early_leave, 
		    SUM(out_status) AS out_status, 
		    SUM(absent) AS absent,
		    SUM(vacation) AS vacation
		FROM attendance
		where emp_no = #{emp_no}
		 AND MONTH(date) = #{month}
 		 AND YEAR(date) = #{year}
	</select>
	<!-- 선택한 달 출퇴근 기록 불러오기 -->
	<select id="attendHistory" parameterType="java.util.Map" resultType="com.spring.daon.attendMgt.Attendance">
		 SELECT *
			FROM attendance
			where emp_no = #{emp_no}
			 AND MONTH(date) = #{month}
			 AND YEAR(date) = #{year}
	</select>
	
	<!-- 선택한 달 변경이력 불러오기 -->
	<select id="changeLog" parameterType="java.util.Map" resultType="com.spring.daon.attendMgt.Attendance">
	     SELECT a.*, e.emp_name, e.emp_img
		    FROM attendance a
		    JOIN employees e ON a.emp_no = e.emp_no
		    WHERE a.emp_no = #{emp_no}
		      AND MONTH(a.date) = #{month}
		      AND YEAR(a.date) = #{year}
		      AND a.message IS NOT NULL
	</select>
	
	<!-- 선택한 근태기록 불러오기기 -->
	<select id="pickAttend" parameterType="int" resultType="com.spring.daon.attendMgt.Attendance">
		select a.* 
			 , e.emp_name
		from attendance a, employees e
	 	where attendance_no = #{attendance_no}
	 	and a.emp_no = e.emp_no
	 	
	</select>
	
	<!-- 근태 기록 수정 -->
	<update id="attendEdit" parameterType="com.spring.daon.attendMgt.Attendance">
		update attendance
		   set  check_in_time = #{check_in_time},
		   		check_out_time = #{check_out_time},
				normal = #{normal},
				late = #{late},
				early_leave = #{early_leave},
				out_status = #{out_status},
				absent = #{absent},
				message = #{message},
				modifier = #{modifier},
				modifyTime = NOW(),
				vacation = #{vacation}
		where  attendance_no = #{attendance_no}
	</update>
	
	<!-- 부서별 출퇴근 통계 불러오기 -->
	<select id="deptAttendCnt" parameterType="java.util.Map" resultType="com.spring.daon.attendMgt.Attendance">
		SELECT 
		    SUM(a.normal) AS normal, 
		    SUM(a.late) AS late, 
		    SUM(a.early_leave) AS early_leave, 
		    SUM(a.absent) AS absent,
		    SUM(a.vacation) AS vacation
		FROM attendance a
		JOIN employees e
		JOIN departments d
		where a.emp_no = e.emp_no
		 AND e.dept_no = d.dept_no 
		 AND (#{dept_no} = 1 OR CAST(e.dept_no AS CHAR) LIKE CONCAT(#{dept_no}, '%'))
		 AND MONTH(date) = #{month}
 		 AND YEAR(date) = #{year}
	</select>
	
	<!-- 부서별 근태현황 불러오기 -->
	<select id="deptStatus" parameterType="int" resultMap="deptStatus">
	 SELECT a.attendance_no
	 	  , a.emp_no
	 	  , a.date
	 	  , a.check_in_time
	 	  , a.check_out_time
	 	  , a.absent
	 	  , d.dept_name
	 	  , e.emp_name
	 	  , d.dept_no
	 	  , e.position_id
	 	  , a.late
	 	  , a.early_leave
	 	  , a.modifier
	 	  , a.vacation
	 	  , a.out_status
	 	  , a.message
	 	  , ws.work_type_no
	 	  , ws.type_name
		FROM attendance a
		JOIN employees e
		JOIN departments d
		JOIN work_schedules ws
		where e.emp_no = a.emp_no
		  AND e.dept_no = d.dept_no 
		  AND ws.work_type_no = e.work_type_no
		  AND (#{dept_no} = 1 OR CAST(e.dept_no AS CHAR) LIKE CONCAT(#{dept_no}, '%'))
		ORDER BY e.position_id asc, a.date DESC, e.emp_name ASC 

	</select>
	<resultMap id="deptStatus" type="com.spring.daon.attendMgt.Attendance" >
		<id property="attendance_no" column="attendance_no"/>
		<result property="emp_no" column="emp_no"/>
		<result property="date" column="date"/>
		<result property="check_in_time" column="check_in_time"/>
		<result property="check_out_time" column="check_out_time"/>
		<result property="absent" column="absent"/>
		<result property="late" column="late"/>
		<result property="early_leave" column="early_leave"/>
		<result property="modifier" column="modifier"/>
		<result property="vacation" column="vacation"/>
		<result property="out_status" column="out_status"/>
		<result property="message" column="message"/>
		
		<result property="emp_name" column="emp_name"/>
		<result property="dept_name" column="dept_name"/>
		<result property="position_id" column="position_id"/>
	</resultMap>
	
	<!-- <<< 휴가관련 >>> -->
	
	<!-- 휴가 생성 내역 -->
	<select id="vacation_log" parameterType="int" resultType="com.spring.daon.attendMgt.Vacation_occur">
	     SELECT *
		    FROM vacation_occur
		    WHERE emp_no = #{emp_no}
	</select>
	
	<!-- 휴가 생성 내역 전체 불러오기 -->
	<select id="allVacation_log" resultType="com.spring.daon.attendMgt.Vacation_occur">
   	     SELECT vo.*
   	     	  , e.emp_name
   	     	  , e.position_id
   	     	  , d.dept_name
		   FROM vacation_occur vo
		   JOIN employees e
		   JOIN departments d
		   where vo.emp_no = e.emp_no
		     AND e.dept_no = d.dept_no
	       ORDER BY e.position_id asc, vo.create_at DESC 
	</select>	
	<!-- 휴가 사용기록 불러오기 -->
	<select id="vacationHistory" parameterType="int" resultType="com.spring.daon.approve.Vacation_req">
	     SELECT vr.*
		   FROM vacation_req vr
		   join documents d
		   join employees e 
		  WHERE d.doc_no =vr.doc_no
		    AND d.emp_no = e.emp_no 
		    AND vr.emp_no = #{emp_no}
		    AND d.doc_status = 3
		    AND vr.vacation_type=1
	</select>
	
	<!-- 휴가 사용기록 불러오기 -->
	<select id="allVacationHistory" resultType="com.spring.daon.approve.Vacation_req">
	     SELECT vr.*
	     	  , e.emp_name
	     	  , e.position_id
	     	  , de.dept_name
		   FROM vacation_req vr
		   join documents d
		   join employees e 
		   JOIN departments de
		  WHERE d.doc_no =vr.doc_no
		    AND d.emp_no = e.emp_no 
		    AND e.dept_no = de.dept_no
		    AND d.doc_status = 3
		    AND vr.vacation_type=1
		  ORDER BY e.position_id asc, vr.start_date DESC 
	</select>
	
	<!-- 근무 유형 불러오기 -->
	<select id="allWorkType" resultType="com.spring.daon.attendMgt.Work_schedules">
		SELECT * FROM work_schedules
	</select>
	
	<!-- 근무 유형 불러오기 -->
	<select id="getWorkType" parameterType="int" resultType="com.spring.daon.attendMgt.Work_schedules">
		SELECT * FROM work_schedules
		where work_type_no = #{work_type_no} 
	</select>
	
	<!-- 근무유형 등록 -->
	<insert id="addWorkSchedule" parameterType="com.spring.daon.attendMgt.Work_schedules">
		INSERT INTO work_schedules(type_name, start_time, end_time, total_time)
		VALUES(#{type_name},#{start_time}, #{end_time}, #{total_time})
	</insert>
	
	<!-- 근무유형 수정 -->
	<update id="editWorkSchedule" parameterType="com.spring.daon.attendMgt.Work_schedules">
		UPDATE work_schedules
		SET 
		  type_name = #{type_name},
		  start_time = #{start_time},
		  end_time = #{end_time},
		  total_time = SEC_TO_TIME(
		    TIME_TO_SEC(#{end_time}) - TIME_TO_SEC(#{start_time})
		  )
		WHERE work_type_no = #{work_type_no};
	</update>
	
	<!-- 근무유형 삭제 -->
    <delete id="deleteWorkSchedule" parameterType="java.util.List">
        DELETE FROM work_schedules
        WHERE work_type_no IN 
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>
    
	<!-- 근무유형 삭제 시 연관된 직원의 근무유형 재설정 -->
	<update id="reassignWorkType" parameterType="java.util.List">
	    UPDATE employees
	    SET work_type_no = (
	        SELECT MIN(work_type_no)
	        FROM work_schedules
	        WHERE work_type_no NOT IN
	        <foreach collection="list" item="workType" open="(" separator="," close=")">
	            #{workType}
	        </foreach>
	    )
	    WHERE work_type_no IN
	    <foreach collection="list" item="workType" open="(" separator="," close=")">
	        #{workType}
	    </foreach>
	</update>
	
	<!-- 직원 목록 조회 -->
	<select id="empList" resultType="com.spring.daon.attendMgt.Work_schedules">
		SELECT w.*
			 , e.emp_no
			 , e.emp_name
			 , e.position_id
			 , e.dept_no
		FROM employees e
		JOIN work_schedules w
		WHERE e.work_type_no = w.work_type_no 
		  AND leave_date IS NULL
		ORDER BY emp_no ASC
		LIMIT #{size} OFFSET #{startRow}
	</select>
	
	<!-- 직원 검색(검색 시 조회) -->
	<select id="searchPerson" resultType="com.spring.daon.attendMgt.Work_schedules">
		SELECT w.*
			 , e.emp_no
			 , e.emp_name
			 , e.position_id
			 , e.dept_no
		FROM employees e
		JOIN work_schedules w
		WHERE e.work_type_no = w.work_type_no 
		  AND leave_date IS NULL
		AND (emp_no LIKE CONCAT('%', #{search}, '%')
		   	 OR emp_name LIKE CONCAT('%', #{search}, '%')
		    )
		ORDER BY emp_no ASC
		LIMIT #{size} OFFSET #{startRow}
	</select>
	
	<!-- 리스트 갯수 -->
	<select id="empCount" resultType="int"> 
		SELECT COUNT(*)
		FROM employees 
		WHERE leave_date IS NULL
	</select>
	
	<!-- 리스트 갯수 -->
	<select id="empCountSearch" resultType="int">
		SELECT COUNT(*)
		FROM employees
		WHERE leave_date IS NULL
		AND (emp_no LIKE CONCAT('%', #{search}, '%')
		     OR emp_name LIKE CONCAT('%', #{search}, '%'))
	</select>
	
	<!-- 직원 근무유형 변경 -->
	<update id="changeWorkSchedule" parameterType="java.util.Map">
		UPDATE employees
		  SET work_type_no = #{work_type_no}
		WHERE emp_no = #{emp_no}
	</update>
</mapper>