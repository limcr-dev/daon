<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
     "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
     
<mapper namespace="com.spring.daon.performMgt.PerformMgtMapper">
	
	<!-- 역량 리스트 불러오기 -->
	<select id="compList" resultType="com.spring.daon.performMgt.EvalQuesComp"> 
		select distinct eval_comp_id
	 		 , eval_comp_type
	 		 , eval_comp_name
	 		 , eval_comp_level
	 		 , eval_comp_description
	 	  from eval_quescomp	 
	</select>
  	
  	<!-- 역량을 넣어서 테스트 insert하기 -->
	<insert id="insertTest" parameterType="com.spring.daon.performMgt.Test">
		INSERT INTO eval_test (eval_emp_type, eval_click_emp, eval_order_num, eval_start_date, eval_end_date)
		VALUES (
		    #{eval_emp_type},
		    #{eval_click_emp},
		    #{eval_order_num},
		   	current_timestamp,
		   	DATE_ADD(NOW(), INTERVAL 7 DAY)
		   	)
	</insert>
	
	<!-- 테스트 리스트 삭제 -->
	<delete id="deleteTest" parameterType="string">
		delete from eval_test
		where eval_order_num=#{eval_order_num}
	</delete>
	
	<!-- 테스트 리스트 update 등록 -->
	<update id="updateTest" parameterType="com.spring.daon.performMgt.Test">
		update eval_test
		   set eval_num1=TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(eval_click_emp, ',', 1), ',', -1))
		  	 , eval_num2=TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(eval_click_emp, ',', 2), ',', -1))
		  	 , eval_num3=TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(eval_click_emp, ',', 3), ',', -1))
		  	 , eval_num4=TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(eval_click_emp, ',', 4), ',', -1))
		  	 , eval_num5=TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(eval_click_emp, ',', 5), ',', -1))
		  	 , registration = 't'
		 where eval_order_num = #{eval_order_num}
  	</update>
	
	<!--  마지막 순번 불러오기(다음번호로 올리기 위합) -->
   	<select id="selectLastOrderNum" resultType="String">
   		SELECT MAX(eval_order_num) FROM eval_test
   	</select>
	
	<!-- 저장된 테스트 리스트 -->
	<select id="testList" resultType="com.spring.daon.performMgt.Test"> 
		select distinct eval_start_date
			 , eval_emp_type
			 ,eval_click_emp
			 , eval_order_num
			 , eval_end_date
		 from eval_test
		 where registration = 'f'
	</select>
	
	<!-- 등록된 테스트 리스트 -->
	<select id="testListT" resultType="com.spring.daon.performMgt.Test"> 
		select distinct eval_start_date
			 , eval_emp_type
			 , eval_click_emp
			 , eval_order_num
			 , eval_end_date
		 from eval_test
 	 	where registration = 't'
	</select>
	
	<!-- update 역량 문제 찾기 -->
  	<select id="updateFind" parameterType="String" resultType="com.spring.daon.performMgt.EvalQuesComp">
		 (SELECT * FROM eval_quescomp
	WHERE eval_comp_id = (SELECT eval_num1 FROM eval_test WHERE eval_order_num = #{eval_order_num})
	LIMIT 2
	)
	UNION ALL
	(
	SELECT * FROM eval_quescomp
	WHERE eval_comp_id = (SELECT eval_num2 FROM eval_test WHERE eval_order_num = #{eval_order_num})
	LIMIT 2
	)
	UNION ALL
	(
	SELECT * FROM eval_quescomp
	WHERE eval_comp_id = (SELECT eval_num3 FROM eval_test WHERE eval_order_num = #{eval_order_num})
	LIMIT 2
	)
	UNION ALL
	(
	SELECT * FROM eval_quescomp
	WHERE eval_comp_id = (SELECT eval_num4 FROM eval_test WHERE eval_order_num = #{eval_order_num})
	LIMIT 2
	)
	UNION ALL
	(
	SELECT * FROM eval_quescomp
	WHERE eval_comp_id = (SELECT eval_num5 FROM eval_test WHERE eval_order_num = #{eval_order_num})
	LIMIT 2)
  	</select>
  	<!-- select * 
		  from eval_quescomp
		 where eval_comp_id in(
			 select eval_num1 from eval_test where eval_order_num = #{eval_order_num}
			 UNION
			 select eval_num2 from eval_test where eval_order_num = #{eval_order_num}
			 UNION
			 select eval_num3 from eval_test where eval_order_num = #{eval_order_num}
			 union
			 select eval_num4 from eval_test where eval_order_num = #{eval_order_num}
			 union
			 select eval_num5 from eval_test where eval_order_num = #{eval_order_num}
		 ) -->
  	
  	<!--  -->
	
	<!-- 역량별 문제 불러오기 -->
	<select id="evalQuesList" resultType="com.spring.daon.performMgt.EvalQuesComp"> 
		select * 
		  from eval_quescomp
	</select>
	
	<!-- 선택된 역량별 문제 불러오기 -->
	<select id="selectTest" resultType="com.spring.daon.performMgt.EvalQuesComp"> 
		select * 
		  from eval_quescomp
		 where eval_comp_id in(
			 select eval_num1 from eval_test where eval_order_num = #{eval_order_num}
			 UNION
			 select eval_num2 from eval_test where eval_order_num = #{eval_order_num}
			 UNION
			 select eval_num3 from eval_test where eval_order_num = #{eval_order_num} 
			 union
			 select eval_num4 from eval_test where eval_order_num = #{eval_order_num}
			 union
			 select eval_num5 from eval_test where eval_order_num = #{eval_order_num}
		 )
	</select>

	
	<!-- 평가 직원 리스트 : 수정-->
	<select id="evalList" resultType="com.spring.daon.performMgt.Test"> 
		select distinct eval_start_date
			 , eval_emp_type
			 ,eval_click_emp
			 , eval_order_num
			 , eval_end_date
		 from eval_test
 	 	  where registration = 't'
	</select>
	
	<!-- 동료 불러오기 -->
	<select id="peerList" parameterType="int" resultType="com.spring.daon.performMgt.PeerTarget"> 
		select pt.eval_peer_no
			 , e.emp_name
			 , eval_order_num
		  from peer_target pt  
		 JOIN employees e ON pt.eval_peer_no = e.emp_no
		   WHERE pt.peer_test_status = "진행전"
		   AND pt.eval_peer_no != #{emp_no}
		   AND pt.eval_emp_no = #{emp_no}
		   GROUP BY pt.eval_peer_no, e.emp_name
	</select>
	
	<!-- 동료평가 평가자 피평가자 insert -->
	<insert id="insertPeerTarget" parameterType="com.spring.daon.performMgt.PeerTarget">
	INSERT INTO peer_target (eval_order_num, eval_emp_no, eval_peer_no)
		SELECT
		  #{eval_order_num},
		  a.emp_no, 
		  b.emp_no
		FROM employees a
		JOIN employees b ON a.dept_no = b.dept_no
		WHERE a.emp_no != b.emp_no
		AND a.dept_no != 1   -- 평가자: 사장/임원 제외
		AND b.dept_no != 1   -- 피평가자: 사장/임원 제외
	</insert>
	
	<!-- 동료평가 결과 저장하기 -->
	<insert id="insertPeerEval" parameterType="com.spring.daon.performMgt.EvalPeer">
		INSERT INTO eval_peer (
			eval_peer_no,
            eval_no,
            eval_type,
            eval_comp1,
            eval_comp1_score,
            eval_comp2,
            eval_comp2_score,
            eval_comp3,
            eval_comp3_score,
            eval_comp4,
            eval_comp4_score,
            eval_comp5,
            eval_comp5_score,
            eval_status,
            eval_total_score,
            eval_test_date,
            eval_order_num)     
		VALUES (
		  	#{eval_peer_no},
            #{eval_no},
            #{eval_type},
            #{eval_comp1},
            #{eval_comp1_score},
            #{eval_comp2},
            #{eval_comp2_score},
            #{eval_comp3},
            #{eval_comp3_score},
            #{eval_comp4},
            #{eval_comp4_score},
            #{eval_comp5},
            #{eval_comp5_score},
            #{eval_status},
            #{eval_total_score},
            NOW(),         <!-- 현재 날짜 저장 -->     
            #{eval_order_num}
            )
	</insert>
	
	<!-- selfTarget 진행안한것만 불러오기?! parameterType="int"   AND st.eval_emp_no = #{emp_no}-->
	<select id="selfList" parameterType="int" resultType="com.spring.daon.performMgt.SelfTarget"> 
		SELECT st.self_test_status
			 , st.eval_order_num
			 , st.eval_emp_no
			 , et.*
		  FROM self_target st, eval_test et
		 WHERE st.eval_order_num = et.eval_order_num
		 AND et.registration = 't'
		   AND st.self_test_status LIKE '진행전'
		   AND st.eval_emp_no = #{emp_no}
	</select>

	<insert id="selfTargetInsert" parameterType="com.spring.daon.performMgt.SelfTarget">
		INSERT INTO self_target(eval_order_num, eval_emp_no)
		SELECT
		    #{eval_order_num},
		  	emp_no
	     FROM employees
	     WHERE dept_no NOT IN(10,20,30,1)
	</insert>
	
	<!-- 자기평가 결과 저장하기 -->
	<insert id="insertSelfEval" parameterType="com.spring.daon.performMgt.EvalSelf">
		INSERT INTO eval_self (        	
            eval_emp_no,
            eval_type,
            eval_comp1,
            eval_comp1_score,
            eval_comp2,
            eval_comp2_score,
            eval_comp3,
            eval_comp3_score,
            eval_comp4,
            eval_comp4_score,
            eval_comp5,
            eval_comp5_score,
            eval_status,
            eval_total_score,
            eval_test_date,
            eval_order_num)     
		VALUES (
		  	#{eval_emp_no},
            #{eval_type},
            #{eval_comp1},
            #{eval_comp1_score},
            #{eval_comp2},
            #{eval_comp2_score},
            #{eval_comp3},
            #{eval_comp3_score},
            #{eval_comp4},
            #{eval_comp4_score},
            #{eval_comp5},
            #{eval_comp5_score},
            #{eval_status},
            #{eval_total_score},
            NOW(),         <!-- 현재 날짜 저장 -->     
            #{eval_order_num}
            )
	</insert>
	
	<!-- 전체 직원 평가 현황 -->
	<select id="evalStatus" resultType="com.spring.daon.performMgt.EvalEmployees">
		SELECT e.*
			 , es.eval_emp_no
			 , ROUND(AVG(es.eval_total_score / 5.0), 2) AS self_avg
			 , COUNT(distinct es.eval_total_score) AS self_cnt
			 , COUNT(distinct st.eval_order_num) As self_total_cnt
			 , ROUND(AVG(ep.eval_total_score / 5.0), 2) AS peer_avg 
		FROM eval_self es, eval_peer ep,self_target st, employees e
		where es.eval_emp_no = ep.eval_peer_no
		and es.eval_emp_no = st.eval_emp_no
		and e.emp_no = es.eval_emp_no
		GROUP BY 
		    eval_emp_no
	</select>
	
	<!-- 자기평가 진행 현황 (개인용)-->
	<select id="selfStatusEmp" parameterType="int" resultType="com.spring.daon.performMgt.SelfTarget">
		SELECT eval_emp_no
		     , SUM(CASE WHEN self_test_status = '제출완료' THEN 1 ELSE 0 END) AS self_cnt
		     , COUNT(*) AS self_total_cnt
		  FROM self_target
		  where eval_emp_no = #{emp_no}
	  GROUP BY eval_emp_no
	</select>
	
	<!-- 동료평가 진행 현황 (관리자용)-->
	<select id="peerStatus" resultType="com.spring.daon.performMgt.PeerTarget">
		SELECT eval_emp_no
		     , SUM(CASE WHEN peer_test_status = '제출완료' THEN 1 ELSE 0 END) AS peer_cnt
		     , COUNT(*) AS peer_total_cnt
		  FROM peer_target
	  GROUP BY eval_emp_no
	</select>
	<!-- 동료평가 진행 현황 (개인용) -->
	<select id="peerStatusEmp" parameterType="int" resultType="com.spring.daon.performMgt.PeerTarget">
		SELECT eval_emp_no
		     , SUM(CASE WHEN peer_test_status = '제출완료' THEN 1 ELSE 0 END) AS peer_cnt
		     , COUNT(*) AS peer_total_cnt
		  FROM peer_target
		  where eval_emp_no = #{emp_no}
	  GROUP BY eval_emp_no
	</select>
	
	
	<!-- 개인별 동료평가 점수 -->
	<select id="peerScore" parameterType="int" resultType="com.spring.daon.performMgt.EvalPeer">
		SELECT eval_order_num
			 , eval_comp1
			 , eval_test_date
			 , ROUND(AVG(eval_comp1_score),2)as avg1
			 , eval_comp2
			 , ROUND(AVG(eval_comp2_score),2)as avg2
			 , eval_comp3
			 , ROUND(AVG(eval_comp3_score),2)as avg3
			 , eval_comp4
			 , ROUND(AVG(eval_comp4_score),2)as avg4
			 , eval_comp5
			 , ROUND(AVG(eval_comp5_score),2)as avg5
			 , eval_total_score
			 , ROUND(eval_total_score /5.0 ,2) as avg_total
		  FROM eval_peer
		where eval_peer_no = #{emp_no}
		group by eval_order_num
	</select>
	
	<!-- 개인별 자기평가 점수 -->
	<select id="selfScore" parameterType="int" resultType="com.spring.daon.performMgt.EvalSelf">
		SELECT eval_order_num
			 , eval_comp1
			 , eval_test_date
			 , eval_comp1_score
			 , eval_comp2
			 , eval_comp2_score
			 , eval_comp3
			 , eval_comp3_score
			 , eval_comp4
			 , eval_comp4_score
			 , eval_comp5
			 , eval_comp5_score
			 , eval_total_score
			 , ROUND(eval_total_score /5.0 ,2) as avg_total
		  FROM eval_self
		where eval_emp_no = #{emp_no}
		group by eval_order_num
	</select>
	
	<!-- 개인별 근태 점수 -->
	<select id="attandScore" parameterType="int" resultType="com.spring.daon.performMgt.EvalAttand">
		SELECT
		    DATE_FORMAT(date, '%Y-%m') AS eval_test_date,
		    sum(late)AS late,
		    sum(early_leave) AS early_leave,
		    sum(absent)*3 AS absent,
		    100-(sum(late)+sum(early_leave)+sum(absent)*3) AS avg_total
		FROM
		    attendance
		WHERE
		    date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE()
		   AND emp_no = #{emp_no}
		GROUP BY
		    DATE_FORMAT(date, '%Y-%m')
		ORDER BY
		    date
	</select>
	<!-- 근태 점수 total -->
	<select id="attandTotalScore" resultType="com.spring.daon.performMgt.EvalAttand">
		SELECT emp_no,
		       ROUND(AVG(avg_total), 2) AS attand_avg
		  FROM
		(SELECT emp_no,
		    	DATE_FORMAT(date, '%Y-%m') AS eval_test_date,
		    	100 - (SUM(late) + SUM(early_leave) + SUM(absent) * 3) AS avg_total
		   FROM attendance
		  WHERE date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE()
		  GROUP BY emp_no, DATE_FORMAT(date, '%Y-%m')) mothly_avg
		  GROUP BY emp_no
	</select>
	
	<!-- 전체 직원 리스트 -->
	<select id="employees" parameterType="int" resultType="com.spring.daon.hrMgt.Employees">
		select *
		  from employees
		 WHERE emp_no = #{emp_no}
	</select>
	
	<!-- 동료평가리스트 -->
	<select id="evalPeer" resultType="com.spring.daon.performMgt.EvalPeer">
		select *
		  from eval_Peer
	</select>
	
	<!-- 자기평가 리스트 -->
	<select id="evalSelf" resultType="com.spring.daon.performMgt.EvalSelf">
		select *
		  from eval_self
	</select>
	
	<!-- 목표설정 -->
	 <insert id="addGoal" parameterType="com.spring.daon.performMgt.Goal">
        INSERT INTO eval_goals (title, description, emp_id)
        VALUES (#{title}, #{description},#{emp_id})
    </insert>
    
	<!-- 목표 목록 (개인) / 월별 달성 -->
    <select id="getAllGoals" parameterType="int" resultType="com.spring.daon.performMgt.Goal">
        select id
        	 , title
			 , description
			 , created_at
			 , completed
			 , DATE_FORMAT(created_at, '%Y-%m') AS goal_month 
		FROM eval_goals
		where emp_id = #{emp_no}
		GROUP BY
		emp_id, DATE_FORMAT(created_at, '%Y-%m')
    </select>
    
     <!-- 목표 리스트 (개인) -->
    <select id="goalsList" parameterType="int" resultType="com.spring.daon.performMgt.Goal">
    	  select id
        	 , title
			 , description
			 , created_at
			 , completed
			 , DATE_FORMAT(created_at, '%Y-%m') as month
		FROM eval_goals
		where emp_id = #{emp_no}
		ORDER BY created_at
    </select>
    
    <!-- 목표 달성률 (개인) -->
    <select id="totalGoalsScore" parameterType="int" resultType="com.spring.daon.performMgt.Goal">
    	SELECT
		    emp_id,
		    DATE_FORMAT(created_at, '%Y-%m') AS goal_month,    
		    ROUND(
		        (SUM(CASE WHEN completed = 1 THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2 ) AS completion_rate
		 FROM eval_goals
		WHERE emp_id = #{emp_id}
		GROUP BY
		    emp_id, DATE_FORMAT(created_at, '%Y-%m')
    </select>
    
   
    
    <!-- 목표 달성률 (전체)-->
    <select id="totalAllGoalsScore" resultType="com.spring.daon.performMgt.Goal">
        SELECT
		    emp_id,
		    DATE_FORMAT(created_at, '%Y-%m') AS goal_month,    
		    ROUND(
		        (SUM(CASE WHEN completed = 1 THEN 1 ELSE 0 END) / COUNT(*)) * 100,
		        2
		    ) AS completion_rate
		FROM
		    eval_goals
		GROUP BY
		    emp_id, DATE_FORMAT(created_at, '%Y-%m')
    </select>
	
	
	<!-- 목표 달성 -->
    <update id="completeGoal" parameterType="long" >
        UPDATE eval_goals SET completed = 1 WHERE id = #{id}
    </update>
	
	
	
</mapper>   
